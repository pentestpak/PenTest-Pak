#!/usr/bin/python 

import socketserver
import signal
import subprocess
import time
import os
import asyncio 
from pwn import *
import subprocess


class ForkedTCPRequestHandler(socketserver.BaseRequestHandler):
    def handle(self):
        signal.alarm(300)

        
        #loop = asyncio.get_event_loop()
        #loop.run_until_complete(async_procedure(self.request))
        #loop.close()

        #Send banner through socket
        message = b"Do you really think you can get to the winners table?\nI'll give you one shot at it, what floor is the table at: \n"
        self.request.sendall(message)

        #Recieve exploit through socket
        response = self.request.recv(1024)
        payload = b'python -c "print ' + response + b'"'
        os.system(payload + b" | ./winners")

        #Send exploit to process
        #p.sendline(response)
        
        #Get Responses from server
        #response = (p.recv(1024))
        #if response in b'Wow! Please excuse me sir I had no idea...here are your chips\n':
        #    self.request.sendall(p.recv())
        #else:
        #    self.request.sendall(response)
        print("Connected") 


class ReusableTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer):
        pass

if __name__ == '__main__':
    HOST,PORT = '0.0.0.0',2490
    socketserver.TCPServer.allow_reuse_address = True

    #Create Server
    with ReusableTCPServer((HOST,PORT), ForkedTCPRequestHandler) as server:
        server.serve_forever()

